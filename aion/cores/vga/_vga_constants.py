supported_resolutions = [
    (640, 350, 70),
    (640, 350, 85),
    (640, 400, 70),
    (640, 400, 85),
    (640, 480, 60),
    (640, 480, 73),
    (640, 480, 75),
    (640, 480, 85),
    (640, 480, 100),
    (720, 400, 85),
    (768, 576, 60),
    (768, 576, 72),
    (768, 576, 75),
    (768, 576, 85),
    (768, 576, 100),
    (800, 600, 56),
    (800, 600, 60),
    (800, 600, 72),
    (800, 600, 75),
    (800, 600, 85),
    (800, 600, 100),
    (1024, 768, 43),
    (1024, 768, 60),
    (1024, 768, 70),
    (1024, 768, 75),
    (1024, 768, 85),
    (1024, 768, 100),
    (1152, 864, 60),
    (1152, 864, 75),
    (1152, 864, 85),
    (1152, 864, 100),
    (1280, 720, 60),
    (1280, 800, 60),
    (1280, 960, 60),
    (1280, 960, 72),
    (1280, 960, 75),
    (1280, 960, 85),
    (1280, 960, 100),
    (1280, 1024, 60),
    (1280, 1024, 75),
    (1280, 1024, 85),
    (1280, 1024, 100),
    (1368, 768, 60),
    (1400, 1050, 60),
    (1400, 1050, 72),
    (1400, 1050, 75),
    (1400, 1050, 85),
    (1400, 1050, 100),
    (1440, 900, 60),
    (1600, 1200, 60),
    (1600, 1200, 65),
    (1600, 1200, 70),
    (1600, 1200, 75),
    (1600, 1200, 85),
    (1600, 1200, 100),
    (1680, 1050, 60),
    (1792, 1344, 60),
    (1792, 1344, 75),
    (1856, 1392, 60),
    (1856, 1392, 75),
    (1920, 1080, 60),
    (1920, 1200, 60),
    (1920, 1440, 60),
    (1920, 1440, 75),
    # custom resolutions tested on my monitors, but not officially supported
    (400, 600, 60),
    (200, 600, 60),
    (400, 600, 72),
]

# pixels clock values are in MHz
pixel_clock_dict = {
    (640, 350, 70): 25.175,
    (640, 350, 85): 31.5,
    (640, 400, 70): 25.175,
    (640, 400, 85): 31.5,
    (640, 480, 60): 25.175,
    (640, 480, 73): 31.5,
    (640, 480, 75): 31.5,
    (640, 480, 85): 36,
    (640, 480, 100): 43.16,
    (720, 400, 85): 35.5,
    (768, 576, 60): 34.96,
    (768, 576, 72): 42.93,
    (768, 576, 75): 45.51,
    (768, 576, 85): 51.84,
    (768, 576, 100): 62.57,
    (800, 600, 56): 36,
    (800, 600, 60): 40,
    (800, 600, 72): 50,
    (800, 600, 75): 49.5,
    (800, 600, 85): 56.25,
    (800, 600, 100): 68.18,
    (1024, 768, 43): 44.9,
    (1024, 768, 60): 65,
    (1024, 768, 70): 75,
    (1024, 768, 75): 78.8,
    (1024, 768, 85): 94.5,
    (1024, 768, 100): 113.31,
    (1152, 864, 60): 81.62,
    (1152, 864, 75): 108,
    (1152, 864, 85): 119.65,
    (1152, 864, 100): 143.47,
    (1280, 720, 60): 74.25,
    (1280, 800, 60): 83.46,
    (1280, 960, 60): 102.1,
    (1280, 960, 72): 124.54,
    (1280, 960, 75): 129.86,
    (1280, 960, 85): 148.5,
    (1280, 960, 100): 178.99,
    (1280, 1024, 60): 108,
    (1280, 1024, 75): 135,
    (1280, 1024, 85): 157.5,
    (1280, 1024, 100): 190.96,
    (1368, 768, 60): 85.86,
    (1400, 1050, 60): 122.61,
    (1400, 1050, 72): 149.34,
    (1400, 1050, 75): 155.85,
    (1400, 1050, 85): 179.26,
    (1400, 1050, 100): 214.39,
    (1440, 900, 60): 106.47,
    (1600, 1200, 60): 162,
    (1600, 1200, 65): 175.5,
    (1600, 1200, 70): 189,
    (1600, 1200, 75): 202.5,
    (1600, 1200, 85): 229.5,
    (1600, 1200, 100): 280.64,
    (1680, 1050, 60): 147.14,
    (1792, 1344, 60): 204.8,
    (1792, 1344, 75): 261,
    (1856, 1392, 60): 218.3,
    (1856, 1392, 75): 288,
    (1920, 1080, 60): 148.5,
    (1920, 1200, 60): 193.16,
    (1920, 1440, 60): 234,
    (1920, 1440, 75): 297,
    # custom resolutions tested on my monitors, but not officially supported
    (400, 600, 60): 20,
    (200, 600, 60): 10,
    (400, 600, 72): 25,
}


# constants are
# h_front_porch, h_sync_width, h_back_porch, h_polarity
# v_front_porch, v_sync_width, v_back_porch, v_polarity
screen_constants = {
    (640, 350, 70): (16, 96, 48, 1, 37, 2, 60, 0),
    (640, 350, 85): (32, 64, 96, 1, 32, 3, 60, 0),
    (640, 400, 70): (16, 96, 48, 0, 12, 2, 35, 1),
    (640, 400, 85): (32, 64, 96, 0, 1, 3, 41, 1),
    (640, 480, 60): (16, 96, 48, 0, 10, 2, 33, 0),
    (640, 480, 73): (24, 40, 128, 0, 9, 2, 29, 0),
    (640, 480, 75): (16, 64, 120, 0, 1, 3, 16, 0),
    (640, 480, 85): (56, 56, 80, 0, 1, 3, 25, 0),
    (640, 480, 100): (40, 64, 104, 0, 1, 3, 25, 1),
    (720, 400, 85): (36, 72, 108, 0, 1, 3, 42, 1),
    (768, 576, 60): (24, 80, 104, 0, 1, 3, 17, 1),
    (768, 576, 72): (32, 80, 112, 0, 1, 3, 21, 1),
    (768, 576, 75): (40, 80, 120, 0, 1, 3, 22, 1),
    (768, 576, 85): (40, 80, 120, 0, 1, 3, 25, 1),
    (768, 576, 100): (48, 80, 128, 0, 1, 3, 31, 1),
    (800, 600, 56): (24, 72, 128, 1, 1, 2, 22, 1),
    (800, 600, 60): (40, 128, 88, 1, 1, 4, 23, 1),
    (800, 600, 72): (56, 120, 64, 1, 37, 6, 23, 1),
    (800, 600, 75): (16, 80, 160, 1, 1, 3, 21, 1),
    (800, 600, 85): (32, 64, 152, 1, 1, 3, 27, 1),
    (800, 600, 100): (48, 88, 136, 0, 1, 3, 32, 1),
    (1024, 768, 43): (8, 176, 56, 1, 0, 8, 41, 1),
    (1024, 768, 60): (24, 136, 160, 0, 3, 6, 29, 0),
    (1024, 768, 70): (24, 136, 144, 0, 3, 6, 29, 0),
    (1024, 768, 75): (16, 96, 176, 1, 1, 3, 28, 1),
    (1024, 768, 85): (48, 96, 208, 1, 1, 3, 36, 1),
    (1024, 768, 100): (72, 112, 184, 0, 1, 3, 42, 1),
    (1152, 864, 60): (64, 120, 184, 0, 1, 3, 27, 1),
    (1152, 864, 75): (64, 128, 256, 1, 1, 3, 32, 1),
    (1152, 864, 85): (72, 128, 200, 0, 1, 3, 39, 1),
    (1152, 864, 100): (80, 128, 208, 0, 1, 3, 47, 1),
    (1280, 720, 60): (72, 80, 216, 1, 3, 5, 22, 1),
    (1280, 800, 60): (64, 136, 200, 0, 1, 3, 24, 1),
    (1280, 960, 60): (80, 136, 216, 0, 1, 3, 30, 1),
    (1280, 960, 72): (88, 136, 224, 0, 1, 3, 37, 1),
    (1280, 960, 75): (88, 136, 224, 0, 1, 3, 38, 1),
    (1280, 960, 85): (64, 160, 224, 1, 1, 3, 47, 1),
    (1280, 960, 100): (96, 144, 240, 0, 1, 3, 53, 1),
    (1280, 1024, 60): (48, 112, 248, 1, 1, 3, 38, 1),
    (1280, 1024, 75): (16, 144, 248, 1, 1, 3, 38, 1),
    (1280, 1024, 85): (64, 160, 224, 1, 1, 3, 44, 1),
    (1280, 1024, 100): (96, 144, 240, 0, 1, 3, 57, 1),
    (1368, 768, 60): (72, 144, 216, 0, 1, 3, 23, 1),
    (1400, 1050, 60): (88, 152, 240, 0, 1, 3, 33, 1),
    (1400, 1050, 72): (96, 152, 248, 0, 1, 3, 40, 1),
    (1400, 1050, 75): (96, 152, 248, 0, 1, 3, 42, 1),
    (1400, 1050, 85): (104, 152, 256, 0, 1, 3, 49, 1),
    (1400, 1050, 100): (112, 152, 264, 0, 1, 3, 58, 1),
    (1440, 900, 60): (80, 152, 232, 0, 1, 3, 28, 1),
    (1600, 1200, 60): (64, 192, 304, 1, 1, 3, 46, 1),
    (1600, 1200, 65): (64, 192, 304, 1, 1, 3, 46, 1),
    (1600, 1200, 70): (64, 192, 304, 1, 1, 3, 46, 1),
    (1600, 1200, 75): (64, 192, 304, 1, 1, 3, 46, 1),
    (1600, 1200, 85): (64, 192, 304, 1, 1, 3, 46, 1),
    (1600, 1200, 100): (128, 176, 304, 0, 1, 3, 67, 1),
    (1680, 1050, 60): (104, 184, 288, 0, 1, 3, 33, 1),
    (1792, 1344, 60): (128, 200, 328, 0, 1, 3, 46, 1),
    (1792, 1344, 75): (96, 216, 352, 0, 1, 3, 69, 1),
    (1856, 1392, 60): (96, 224, 352, 0, 1, 3, 43, 1),
    (1856, 1392, 75): (128, 224, 352, 0, 1, 3, 104, 1),
    (1920, 1080, 60): (88, 44, 148, 1, 4, 5, 36, 1),
    (1920, 1200, 60): (128, 208, 336, 0, 1, 3, 38, 1),
    (1920, 1440, 60): (128, 208, 344, 0, 1, 3, 56, 1),
    (1920, 1440, 75): (144, 224, 352, 0, 1, 3, 56, 1),
    # custom resolutions tested on my monitors, but not officially supported
    (400, 600, 60): (20, 64, 44, 1, 1, 4, 23, 1),
    (200, 600, 60): (10, 32, 22, 1, 1, 4, 23, 1),
    (100, 600, 60): (5, 16, 11, 1, 1, 4, 23, 1),
    (400, 600, 72): (28, 60, 32, 1, 37, 6, 23, 1),
}


# these parameters are necessary because the parameter calculator given by
# xilinx doesn't give optimal answers
# m and d parameters for xilinx single dcm
single_mul_div_50 = {
    10: (2, 10),
    20: (2, 5),
    25: (2, 4),
    31.5: (17, 27),
    34.96: (7, 10),
    35.5: (22, 31),
    36: (18, 25),
    40: (4, 5),
    42.93: (6, 7),
    43.16: (19, 22),
    45.51: (10, 11),
    49.5: (2, 2),
    51.84: (28, 27),
    56.25: (9, 8),
    62.57: (5, 4),
    65: (13, 10),
    68.18: (15, 11),
    75: (3, 2),
    78.8: (30, 19),
    81.62: (31, 19),
    83.46: (5, 3),
    85.86: (12, 7),
    94.5: (17, 9),
    102.1: (31, 15),
    106.47: (32, 15),
    119.65: (12, 5),
    122.61: (27, 11),
    124.54: (5, 2),
    129.86: (13, 5),
    135: (27, 10),
    143.47: (23, 8),
    149.34: (3, 1),
    155.85: (28, 9),
    157.5: (22, 7),
    162: (13, 4),
    175.5: (7, 2),
    178.99: (25, 7),
    179.26: (25, 7),
    202.5: (4, 1),
    204.8: (29, 7),
    214.39: (30, 7),
    229.5: (23, 5),
    234: (14, 3),
    261: (26, 5),
    280.64: (28, 5),
    288: (23, 4),
    297: (6, 1),
}


# clkdv, m, and d parameters for xilinx chained dcm
chained_mul_div_50 = {
    25.175: (3.5, 30, 17),
    44.9: (3.5, 7, 22),
    74.25: (3.5, 26, 5),
    108: (2.5, 27, 5),
    113.31: (7.5, 17, 1),
    147.14: (0.5, 25, 17),
    148.5: (3.5, 31, 3),
    189: (4.5, 17, 1),
    190.96: (5.5, 21, 1),
    193.16: (2.5, 29, 3),
    218.3: (5.5, 24, 1),
}


# dcm's can't always be exactly accurate. these are the actual output
# frequencies of the dcm's
actual_clock_freq = {
    10: 10,
    20: 20,
    25: 25,
    25.175: 25.210084033613445,
    31.5: 31.48148148148148,
    34.96: 35.0,
    35.5: 35.483870967741936,
    36: 36.0,
    40: 40.0,
    42.93: 42.857142857142854,
    43.16: 43.18181818181818,
    44.9: 44.89795918367347,
    45.51: 45.45454545454545,
    49.5: 50.0,
    51.84: 51.851851851851855,
    56.25: 56.25,
    62.57: 62.5,
    65: 65,
    68.18: 68.18181818181819,
    74.25: 74.28571428571429,
    75: 75.0,
    78.8: 78.94736842105263,
    81.62: 81.57894736842105,
    83.46: 83.33333333333333,
    85.86: 85.71428571428571,
    94.5: 94.44444444444444,
    102.1: 103.33333333333333,
    106.47: 106.66666666666667,
    108: 108,
    113.31: 113.33333333333333,
    119.65: 120.0,
    122.61: 122.72727272727273,
    124.54: 125.0,
    129.86: 130.0,
    135: 135.0,
    143.47: 143.75,
    147.14: 147.05882352941177,
    148.5: 147.61904761904762,
    149.34: 150.0,
    155.85: 155.55555555555554,
    157.5: 157.14285714285714,
    162: 162.5,
    175.5: 175.0,
    178.99: 178.57142857142858,
    179.26: 178.57142857142858,
    189: 188.88888888888889,
    190.96: 190.9090909090909,
    193.16: 193.33333333333331,
    202.5: 200.0,
    204.8: 207.14285714285714,
    214.39: 214.28571428571428,
    218.3: 218.1818181818182,
    229.5: 230.0,
    234: 233.33333333333334,
    261: 260.0,
    280.64: 280.0,
    288: 287.5,
    297: 300.0,
}

